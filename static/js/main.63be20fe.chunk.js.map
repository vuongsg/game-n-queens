{"version":3,"sources":["slices/nQueens-slices.ts","components/Footer.tsx","producers/nQueensProducer.ts","components/nQueens.tsx","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["Footer","id","initialState","Array","i","fill","slice","createSlice","name","reducers","changeBoard","state","action","payload","actions","NqueenProducer","board","size","length","result","Set","row","col","add","k","Nqueens","useSelector","nQueens","dispatch","useDispatch","rowsBoard","useRef","initialCurrentTempboard","currentTempBoard","drawBoard","useCallback","setQueen","e","gridBoard","document","querySelector","cellBoard","target","className","indexOf","eachQueenEachRow","rows","tempBoard","current","parseInt","classList","substr","n","btnCheckAnswer","filter","m","setAttribute","style","cursor","removeAttribute","elementsSameRow","getElementsByClassName","cell","backgroundImage","border","window","getComputedStyle","getPropertyValue","process","backgroundSize","from","cellDiv","removeProperty","title","cells","isWhiteCell","classNames","push","React","createElement","tabIndex","onMouseDown","rowClassNames","reInitializeBoard","newBoard","Grid","container","direction","item","xs","lg","InputLabel","Select","labelId","value","onChange","MenuItem","marginTop","marginBottom","alignItems","alt","src","disabled","answer","checkBoardValid","alert","cellUI","join","has","delete","justifyContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","nQueensReducer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.63be20fe.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: boolean[][] = Array(4);\r\nfor (let i = 0; i < 4; i++) {\r\n    initialState[i] = Array(4).fill(false);\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'nQueens',\r\n    initialState: initialState,\r\n    reducers: {\r\n        changeBoard: (state: boolean[][], action: PayloadAction<boolean[][]>) => {\r\n            return action.payload;\r\n        }\r\n    }\r\n})\r\n\r\nexport const { changeBoard } = slice.actions;\r\nexport default slice.reducer;","import './Footer.scss';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <footer id=\"main-footer\">\r\n            <h3>Created by Vuong Nguyen &copy; 2021</h3>\r\n        </footer>\r\n    )\r\n}","export class NqueenProducer {\r\n    static checkBoardValid(board: boolean[][]): Set<string> {\r\n        const size = board.length;\r\n        const result = new Set<string>();\r\n\r\n        for (let row = 0; row < size; row++) {\r\n            for (let col = 0; col < size; col++) {\r\n                if (board[row][col]) {\r\n                    //check above\r\n                    for (let i = row - 1; i >= 0; i--) {\r\n                        if (board[i][col]) {\r\n                            result.add(`row${i} col${col}`);\r\n                            result.add(`row${row} col${col}`);\r\n                        }\r\n                    }\r\n\r\n                    //check left-side\r\n                    for (let k = col - 1; k >= 0; k--) {\r\n                        if (board[row][k]) {\r\n                            result.add(`row${row} col${k}`);\r\n                            result.add(`row${row} col${col}`);\r\n                        }\r\n                    }\r\n                    \r\n                    //check upper-backward slash\r\n                    for (let i = row - 1, k = col - 1; i >= 0 && k >= 0; i--, k--) {\r\n                        if (board[i][k]) {\r\n                            result.add(`row${i} col${k}`);\r\n                            result.add(`row${row} col${col}`);\r\n                        }\r\n                    }\r\n\r\n                    //check upper-forward slash\r\n                    for (let i = row - 1, k = col + 1; i >= 0 && k < size; i--, k++) {\r\n                        if (board[i][k]) {\r\n                            result.add(`row${i} col${k}`);\r\n                            result.add(`row${row} col${col}`);\r\n                            i--;\r\n                            k++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","import React, { ReactElement } from 'react';\r\nimport { useRef, useCallback } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Grid, MenuItem, Select, InputLabel } from \"@material-ui/core\";\r\nimport { changeBoard } from \"../slices/nQueens-slices\";\r\nimport { RootType } from \"../store\"; \r\nimport { NqueenProducer } from '../producers/nQueensProducer';\r\nimport './nQueens.scss';\r\n\r\nexport const Nqueens = (): ReactElement => {\r\n    let board = useSelector<RootType>(state => state.nQueens) as boolean[][];   //board state\r\n    const dispatch = useDispatch();\r\n    let initialRowsBoard: ReactElement[] = [];\r\n    const rowsBoard = useRef(initialRowsBoard);     //display UI\r\n    let initialCurrentTempboard = [...board];       //save board state immediately each change\r\n    let currentTempBoard = useRef(initialCurrentTempboard);\r\n\r\n    const drawBoard = useCallback(() => {\r\n        const setQueen = (e:React.MouseEvent<HTMLDivElement>): void => {\r\n            const gridBoard = document.querySelector('#grid-board');\r\n            let cellBoard = e.target as HTMLDivElement;\r\n\r\n            if (gridBoard !== null && cellBoard !== null && cellBoard.className.indexOf('cell-board') !== -1) {\r\n                //set new value for currentTempBoard, check whether each queen each row or not\r\n                const eachQueenEachRow: boolean[] = Array(rows).fill(false);\r\n                const tempBoard = Array(rows);\r\n\r\n                for (let i = 0; i < rows; i++) {\r\n                    tempBoard[i] = Array(rows).fill(false);\r\n\r\n                    for (let k = 0; k < rows; k++) {\r\n                        tempBoard[i][k] = currentTempBoard.current[i][k];\r\n                        if (tempBoard[i][k]) {\r\n                            eachQueenEachRow[i] = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                const row = parseInt(cellBoard.classList[0].substr(cellBoard.classList[0].indexOf('row') + 'row'.length));\r\n                const col = parseInt(cellBoard.classList[1].substr(cellBoard.classList[1].indexOf('col') + 'col'.length));\r\n                for (let k = 0, n = currentTempBoard.current.length; k < n; k++) {\r\n                    tempBoard[row][k] = (k === col);\r\n                    if (tempBoard[row][k]) {\r\n                        eachQueenEachRow[row] = true;\r\n                    }\r\n                }\r\n\r\n                currentTempBoard.current = [...tempBoard];\r\n                const btnCheckAnswer = document.querySelector('#btn-check-answer') as HTMLButtonElement;\r\n                if (eachQueenEachRow.filter(m => !m).length > 0) {\r\n                    btnCheckAnswer.setAttribute('disabled', 'disabled');\r\n                    (document.querySelector('#div-fake-check-answer') as HTMLDivElement).style.cursor = 'not-allowed';\r\n                } else {\r\n                    btnCheckAnswer.removeAttribute('disabled');\r\n                    (document.querySelector('#div-fake-check-answer') as HTMLDivElement).style.cursor = 'auto';\r\n                }\r\n\r\n                const elementsSameRow = gridBoard.getElementsByClassName(cellBoard.classList[0]);\r\n\r\n                //reset background for all elements in that row\r\n                if (elementsSameRow != null) {\r\n                    for (let i = 0, n = elementsSameRow.length; i < n; i++) {\r\n                        const cell = elementsSameRow[i] as HTMLDivElement;\r\n                        cell.style.backgroundImage = 'none';\r\n                        cell.style.border = 'none';\r\n                    }\r\n                }\r\n    \r\n                if (window.getComputedStyle(cellBoard, null).getPropertyValue('background-color') === 'rgb(255, 255, 255)') {\r\n                    cellBoard.style.backgroundImage = `url('${process.env.PUBLIC_URL + '/img/queen-piece.jpg'}')`;\r\n                } else {\r\n                    cellBoard.style.backgroundImage = `url('${process.env.PUBLIC_URL + '/img/queen-white-piece.jpg'}')`;\r\n                }\r\n    \r\n                cellBoard.style.backgroundSize = 'cover';\r\n            } \r\n        };\r\n        \r\n        currentTempBoard.current = [...board];\r\n        const gridBoard = document.querySelector('#grid-board');\r\n        if (gridBoard !== null) {   //at initialize, gridBoard does not exist\r\n            const rowsCollection = Array.from(document.getElementsByClassName('row-board'));\r\n\r\n            for (let row of rowsCollection) {\r\n                const cellsCollection = Array.from(row.getElementsByClassName('cell-board'));\r\n\r\n                for (let cell of cellsCollection) {\r\n                    const cellDiv = cell as HTMLDivElement;\r\n                    cellDiv.style.backgroundImage = 'none';\r\n                    cellDiv.style.removeProperty('border');\r\n                }\r\n            }\r\n        }\r\n\r\n        const rows = board.length;\r\n        document.title = `Game ${rows} x ${rows} queens`;\r\n        rowsBoard.current = [];\r\n\r\n        for (let i = 0; i < rows; i++) {\r\n            const cells: ReactElement[] = [];\r\n            for (let k = 0; k < rows; k++) {\r\n                let isWhiteCell = ((k & 1) === 0 && (i & 1) === 0) || ((k & 1) === 1 && (i & 1) === 1);\r\n                const classNames = `row${i} col${k} cell-board ${isWhiteCell ? 'white' : 'black'}`;\r\n                cells.push(React.createElement('div', { className: classNames, tabIndex: 0, onMouseDown: setQueen }));\r\n            }\r\n\r\n            const rowClassNames = `row-board ${i === 0 ? '' : 'second-more'}`;\r\n            rowsBoard.current.push(React.createElement('div', { className: rowClassNames }, cells));\r\n        }\r\n    }, [board]);\r\n\r\n    /**\r\n     * cbx Size change event\r\n     * @param e \r\n     */\r\n    const changeSize = (e:React.ChangeEvent<{value: unknown}>): void => {\r\n        reInitializeBoard(parseInt(e.target.value as string));\r\n        const btnCheckAnswer = document.querySelector('#btn-check-answer') as HTMLButtonElement;\r\n        btnCheckAnswer.setAttribute('disabled', 'disabled');\r\n        (document.querySelector('#div-fake-check-answer') as HTMLDivElement).style.cursor = 'not-allowed';\r\n    }\r\n\r\n    const reInitializeBoard = (size: number): void => {\r\n        let newBoard: boolean[][] = Array(size);\r\n        for (let i = 0; i < size; i++) {\r\n            newBoard[i] = Array(size).fill(false);\r\n        }\r\n\r\n        dispatch(changeBoard(newBoard));\r\n    }\r\n\r\n    /**\r\n     * btn 'Check Answer' click event\r\n     * @param e \r\n     * @returns \r\n     */\r\n    const checkAnswer = (e: React.MouseEvent<HTMLDivElement>): void => {\r\n        const btnCheckAnswer = document.querySelector('#btn-check-answer') as HTMLButtonElement;\r\n        if (btnCheckAnswer.disabled) {\r\n            return;\r\n        }\r\n\r\n        //construct new board from current UI\r\n        const gridBoard = document.querySelector('#grid-board');\r\n\r\n        if (gridBoard !== null) {\r\n            const answer = NqueenProducer.checkBoardValid(currentTempBoard.current);\r\n\r\n            if (answer.size === 0) {\r\n                alert('Congratulations! You have an amazing play *__*');\r\n            } else {\r\n                const rowsCollection = Array.from(gridBoard.getElementsByClassName('row-board'));\r\n\r\n                for (let row of rowsCollection) {\r\n                    const cellsCollection = Array.from(row.getElementsByClassName('cell-board'));\r\n\r\n                    for (let cell of cellsCollection) {\r\n                        const cellUI = cell as HTMLDivElement;\r\n                        const classList = [cellUI.classList[0], cellUI.classList[1]].join(' ');\r\n\r\n                        if (answer.has(classList)) {\r\n                            cellUI.style.border = '4px solid red';\r\n                            answer.delete(classList);\r\n                            break;\r\n                        } else {\r\n                            cellUI.style.border = 'none';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    drawBoard();    //draw board at initialize\r\n\r\n    return (\r\n        <Grid container direction='row'>\r\n            <Grid item xs={12} lg={5} id='select-area'>\r\n                <div>\r\n                    <InputLabel id='label-size'>Choose size</InputLabel>\r\n                    <Select labelId='label-size' value={board.length} onChange={changeSize}>\r\n                        <MenuItem value=\"4\">4 x 4</MenuItem>\r\n                        <MenuItem value=\"6\">6 x 6</MenuItem>\r\n                        <MenuItem value=\"8\">8 x 8</MenuItem>\r\n                        <MenuItem value=\"10\">10 x 10</MenuItem>\r\n                    </Select>\r\n                </div>\r\n\r\n                <Grid container direction='row' style={{ marginTop: 30, marginBottom: 20, alignItems: 'center' }}>\r\n                    <Grid xs={12} lg={3}>\r\n                        <img id='img-queen' alt='' src={process.env.PUBLIC_URL + '/img/queen-piece.jpg'} />\r\n                    </Grid>\r\n                    <Grid xs={12} lg={9}>\r\n                        <p>Pick any cell to set queen. Note that every row, column and diagonal only have one queen.</p>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <div id='div-fake-check-answer' style={{ marginTop: 30, marginBottom: 30, cursor: 'not-allowed' }} onMouseDown={checkAnswer}>\r\n                    <button id='btn-check-answer' className='primary' disabled>Check answer</button>\r\n                </div>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} lg={7} justifyContent='center' id='grid-board'>\r\n                {rowsBoard.current}\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from 'react';\nimport { Footer } from './components/Footer';\nimport { Nqueens } from './components/nQueens';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"App\">\n        <Nqueens />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport nQueensReducer from './slices/nQueens-slices';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        nQueens: nQueensReducer\r\n    }\r\n});\r\n\r\nexport type RootType = ReturnType<typeof store.getState>;\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}